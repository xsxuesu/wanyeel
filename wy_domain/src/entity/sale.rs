use rbatis::DateNative;
use rbatis::DateTimeNative;
use serde::{Deserialize, Serialize};

// 订单结算
#[crud_table(table_name:sale_info)]
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct SaleInfo {
    pub id: Option<u64>,
    pub sale_pay_id: Option<u64>,
    pub company_code: Option<String>,
    pub client_name: Option<String>,
    pub sale_mode: Option<i32>,
    pub sale_date: Option<DateNative>,
    pub delivery_cate: Option<i32>,
    pub latest_delivery_date: Option<DateNative>,
    pub sale_tax: Option<f64>,
    pub pre_sale_all_amount: Option<f64>,
    pub sale_all_amount: Option<f64>,
    pub recieved_amount: Option<f64>,
    pub trans_in_amount: Option<f64>,
    pub trans_out_amount: Option<f64>,
    pub charge_mode: Option<i32>,
    pub charge_pre_scale: Option<f64>,
    pub charge_pre_amount: Option<f64>,
    pub after_sale_amount: Option<f64>,
    pub unit_money: Option<String>,
    pub charge_date: Option<DateNative>,
    pub charge_way: Option<String>,
    pub sale_person: Option<String>,
    pub sale_status: Option<i32>,
    pub created_at: Option<DateTimeNative>,
    pub updated_at: Option<DateTimeNative>,
}

impl_field_name_method!(SaleInfo {
    id,
    sale_pay_id,
    company_code,
    client_name,
    sale_mode,
    sale_date,
    delivery_cate,
    latest_delivery_date,
    sale_tax,
    charge_mode,
    charge_pre_scale,
    charge_pre_amount,
    pre_sale_all_amount,
    sale_all_amount,
    recieved_amount,
    trans_in_amount,
    trans_out_amount,
    after_sale_amount,
    unit_money,
    charge_date,
    charge_way,
    sale_person,
    sale_status,
    created_at,
    updated_at,
});

// 订单产品
#[crud_table(table_name:sale_product)]
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct SaleProduct {
    pub id: Option<u64>,
    pub company_code: Option<String>,
    pub warehouse: Option<String>,
    pub variety: Option<String>,
    pub origin: Option<String>,
    pub shop_sign: Option<String>,
    pub spec: Option<String>,
    pub sale_number: Option<f64>,
    pub sale_weight: Option<f64>,
    pub unit_price: Option<f64>,
    pub cacl_mode: Option<String>,
    pub way_weight: Option<String>,
    pub one_weight: Option<f64>,
    pub tax_rate: Option<f64>,
    pub unit: Option<String>,
    pub unit_money: Option<String>,
    pub resource_number: Option<String>,
    pub contract_number: Option<String>,
    pub vechel_number: Option<String>,
    pub package_number: Option<String>,
    pub storage_id: Option<u64>,
    pub sale_id: Option<u64>,
    pub storage_cate: Option<i32>,
    pub instorage_date: Option<DateNative>,
    pub outstorage_date: Option<DateNative>,
    pub back_number: Option<f64>,
    pub back_weight: Option<f64>,
    pub back_amount: Option<f64>,
    pub back_status: Option<i32>,
    pub sale_after_id: Option<u64>,
    pub sale_status: Option<i32>,
    pub created_at: Option<DateTimeNative>,
    pub updated_at: Option<DateTimeNative>,
}

impl_field_name_method!(SaleProduct {
    id,
    company_code,
    warehouse,
    variety,
    origin,
    shop_sign,
    spec,
    sale_number,
    sale_weight,
    unit_price,
    cacl_mode,
    way_weight,
    one_weight,
    tax_rate,
    unit,
    unit_money,
    resource_number,
    contract_number,
    vechel_number,
    package_number,
    storage_id,
    sale_id,
    storage_cate,
    instorage_date,
    outstorage_date,
    back_number,
    back_weight,
    back_amount,
    back_status,
    sale_after_id,
    sale_status,
    created_at,
    updated_at,
});


// 预售产品
#[crud_table(table_name:presale_product)]
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct PreSaleProduct {
    pub id: Option<u64>,
    pub sale_id: Option<u64>,
    pub company_code: Option<String>,
    pub variety: Option<String>,
    pub origin: Option<String>,
    pub shop_sign: Option<String>,
    pub spec: Option<String>,
    pub cacl_mode: Option<String>,
    pub unit: Option<String>,
    pub unit_money: Option<String>,
    pub presale_number: Option<f64>,
    pub presale_weight: Option<f64>,
    pub presale_all_weight: Option<f64>,
    pub presale_unit_price: Option<f64>,
    pub presale_amount: Option<f64>,
    pub tax_rate: Option<f64>,
    pub created_at: Option<DateTimeNative>,
    pub updated_at: Option<DateTimeNative>,
}

impl_field_name_method!(PreSaleProduct {
    id,
    sale_id,
    company_code,
    variety,
    origin,
    shop_sign,
    spec,
    cacl_mode,
    unit,
    unit_money,
    presale_number,
    presale_weight,
    presale_all_weight,
    presale_unit_price,
    presale_amount,
    tax_rate,
    created_at,
    updated_at,

});


// 销售结算
#[crud_table(table_name:sale_pay)]
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct SalePay {
    pub id: Option<u64>,
    pub company_code: Option<String>,
    pub client_name: Option<String>,
    pub sale_id: Option<u64>,
    pub sale_type: Option<i32>,
    pub sale_number: Option<f64>,
    pub sale_weight: Option<f64>,
    pub out_number: Option<f64>,
    pub out_weight: Option<f64>,
    pub sale_unit_price: Option<f64>,
    pub sale_amount: Option<f64>,
    pub pay_weight: Option<f64>,
    pub tax_rate: Option<f64>,
    pub pay_amount: Option<f64>,
    pub invoice_amount: Option<f64>,
    pub pay_diff_amount: Option<f64>,
    pub money_way: Option<i32>,
    pub recieved_amount: Option<f64>,
    pub after_sale_amount: Option<f64>,
    pub after_sale_trans_amount: Option<f64>,
    pub unit: Option<String>,
    pub unit_money: Option<String>,
    pub pay_date: Option<DateNative>,
    pub pay_person: Option<String>,
    pub sale_pay_status: Option<i32>,
    pub trans_amount: Option<f64>,
    pub rate_amount: Option<f64>,
    pub mome: Option<String>,
    pub created_at: Option<DateTimeNative>,
    pub updated_at: Option<DateTimeNative>,
}

impl_field_name_method!(SalePay {
    id,
    company_code,
    client_name,
    sale_id,
    sale_type,
    sale_number,
    sale_weight,
    out_number,
    out_weight,
    sale_unit_price,
    sale_amount,
    pay_weight,
    tax_rate,
    pay_amount,
    recieved_amount,
    invoice_amount,
    after_sale_amount,
    after_sale_trans_amount,
    pay_diff_amount,
    money_way,
    pay_date,
    pay_person,
    unit,
    unit_money,
    sale_pay_status,
    trans_amount,
    rate_amount,
    mome,
    created_at,
    updated_at,
});



// 售后
#[crud_table(table_name:sale_after)]
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct SaleAfter {
    pub id: Option<u64>,
    pub company_code: Option<String>,
    pub after_sale_cate: Option<String>,
    pub sale_id: Option<u64>,
    pub sale_name: Option<String>,
    pub client_name: Option<String>,
    pub after_sale_date: Option<DateNative>,
    pub back_mode: Option<String>,
    pub back_date: Option<DateNative>,
    pub back_money_way: Option<String>,
    pub back_amount: Option<f64>,
    pub unit_money: Option<String>,
    pub trans_in_amount: Option<f64>,
    pub trans_out_amount: Option<f64>,
    pub back_person: Option<String>,
    pub mome: Option<String>,
    pub sale_after_status: Option<i32>,
    pub created_at: Option<DateTimeNative>, // You may want to use a proper date type here
    pub updated_at: Option<DateTimeNative>, // You may want to use a proper date type here
}


impl_field_name_method!(SaleAfter {
    id,
    company_code,
    after_sale_cate,
    client_name,
    sale_id,
    sale_name,
    after_sale_date,
    back_mode,
    back_date,
    back_money_way,
    back_amount,
    unit_money,
    trans_in_amount,
    trans_out_amount,
    back_person,
    sale_after_status,
    mome,
    created_at,
    updated_at,
});